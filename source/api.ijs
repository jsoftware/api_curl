curl_strequal=: ((dquote libcurl), ' curl_strequal > i *c *c ') & (15!:0)                               NB. int curl_strequal (const char *, const char *);
curl_strnequal=: ((dquote libcurl), ' curl_strnequal > i *c *c x ') & (15!:0)                           NB. int curl_strnequal (const char *, const char *, size_t);
curl_mime_init=: ((dquote libcurl), ' curl_mime_init > x x ') & (15!:0)                                 NB. curl_mime *curl_mime_init (CURL *);
curl_mime_free=: ((dquote libcurl), ' curl_mime_free > n x ') & (15!:0)                                 NB. void curl_mime_free (curl_mime *);
curl_mime_addpart=: ((dquote libcurl), ' curl_mime_addpart > x x ') & (15!:0)                           NB. curl_mimepart *curl_mime_addpart (curl_mime *);
curl_mime_name=: ((dquote libcurl), ' curl_mime_name > i x *c ') & (15!:0)                              NB. CURLcode curl_mime_name (curl_mimepart *, const char *);
curl_mime_filename=: ((dquote libcurl), ' curl_mime_filename > i x *c ') & (15!:0)                      NB. CURLcode curl_mime_filename (curl_mimepart *, const char *);
curl_mime_type=: ((dquote libcurl), ' curl_mime_type > i x *c ') & (15!:0)                              NB. CURLcode curl_mime_type (curl_mimepart *, const char *);
curl_mime_encoder=: ((dquote libcurl), ' curl_mime_encoder > i x *c ') & (15!:0)                        NB. CURLcode curl_mime_encoder (curl_mimepart *, const char *);
curl_mime_data=: ((dquote libcurl), ' curl_mime_data > i x *c x ') & (15!:0)                            NB. CURLcode curl_mime_data (curl_mimepart *, const char *, size_t);
curl_mime_filedata=: ((dquote libcurl), ' curl_mime_filedata > i x *c ') & (15!:0)                      NB. CURLcode curl_mime_filedata (curl_mimepart *, const char *);
curl_mime_data_cb=: ((dquote libcurl), ' curl_mime_data_cb > i x x x x x x ') & (15!:0)                 NB. CURLcode curl_mime_data_cb (curl_mimepart *, curl_off_t, curl_read_callback, curl_seek_callback, curl_free_callback, void *);
curl_mime_subparts=: ((dquote libcurl), ' curl_mime_subparts > i x x ') & (15!:0)                       NB. CURLcode curl_mime_subparts (curl_mimepart *, curl_mime *);
curl_mime_headers=: ((dquote libcurl), ' curl_mime_headers > i x x i ') & (15!:0)                       NB. CURLcode curl_mime_headers (curl_mimepart *, struct curl_slist *, int);
curl_formadd=: ((dquote libcurl), ' curl_formadd > i *x *x x ') & (15!:0)                               NB. CURLFORMcode curl_formadd (struct curl_httppost **, struct curl_httppost **, ...);
curl_formget=: ((dquote libcurl), ' curl_formget > i x x x ') & (15!:0)                                 NB. int curl_formget (struct curl_httppost *, void *, curl_formget_callback);
curl_formfree=: ((dquote libcurl), ' curl_formfree > n x ') & (15!:0)                                   NB. void curl_formfree (struct curl_httppost *);
curl_getenv=: ((dquote libcurl), ' curl_getenv > x *c ') & (15!:0)                                      NB. char *curl_getenv (const char *);
curl_version=: ((dquote libcurl), ' curl_version > x ') & (15!:0)                                       NB. char *curl_version (void);
curl_easy_escape=: ((dquote libcurl), ' curl_easy_escape > x x *c i ') & (15!:0)                        NB. char *curl_easy_escape (CURL *, const char *, int);
curl_escape=: ((dquote libcurl), ' curl_escape > x *c i ') & (15!:0)                                    NB. char *curl_escape (const char *, int);
curl_easy_unescape=: ((dquote libcurl), ' curl_easy_unescape > x x *c i *i ') & (15!:0)                 NB. char *curl_easy_unescape (CURL *, const char *, int, int *);
curl_unescape=: ((dquote libcurl), ' curl_unescape > x *c i ') & (15!:0)                                NB. char *curl_unescape (const char *, int);
curl_free=: ((dquote libcurl), ' curl_free > n x ') & (15!:0)                                           NB. void curl_free (void *);
curl_global_init=: ((dquote libcurl), ' curl_global_init > i x ') & (15!:0)                             NB. CURLcode curl_global_init (long int);
curl_global_init_mem=: ((dquote libcurl), ' curl_global_init_mem > i x x x x x x ') & (15!:0)           NB. CURLcode curl_global_init_mem (long int, curl_malloc_callback, curl_free_callback, curl_realloc_callback, curl_strdup_callback, curl_calloc_callback);
curl_global_cleanup=: ((dquote libcurl), ' curl_global_cleanup > n ') & (15!:0)                         NB. void curl_global_cleanup (void);
curl_global_trace=: ((dquote libcurl), ' curl_global_trace > i *c ') & (15!:0)                          NB. CURLcode curl_global_trace (const char *);
curl_global_sslset=: ((dquote libcurl), ' curl_global_sslset > i x *c *x ') & (15!:0)                   NB. CURLsslset curl_global_sslset (curl_sslbackend, const char *, const curl_ssl_backend ***);
curl_slist_append=: ((dquote libcurl), ' curl_slist_append > x x *c ') & (15!:0)                        NB. struct curl_slist *curl_slist_append (struct curl_slist *, const char *);
curl_slist_free_all=: ((dquote libcurl), ' curl_slist_free_all > n x ') & (15!:0)                       NB. void curl_slist_free_all (struct curl_slist *);
curl_getdate=: ((dquote libcurl), ' curl_getdate > x *c x ') & (15!:0)                                  NB. time_t curl_getdate (const char *, const time_t *);
curl_share_init=: ((dquote libcurl), ' curl_share_init > x ') & (15!:0)                                 NB. CURLSH *curl_share_init (void);
curl_share_setopt=: ((dquote libcurl), ' curl_share_setopt > i x i x ') & (15!:0)                       NB. CURLSHcode curl_share_setopt (CURLSH *, CURLSHoption, ...);
curl_share_cleanup=: ((dquote libcurl), ' curl_share_cleanup > i x ') & (15!:0)                         NB. CURLSHcode curl_share_cleanup (CURLSH *);
curl_version_info=: ((dquote libcurl), ' curl_version_info > x i ') & (15!:0)                           NB. curl_version_info_data *curl_version_info (CURLversion);
curl_easy_strerror=: ((dquote libcurl), ' curl_easy_strerror > x i ') & (15!:0)                         NB. const char *curl_easy_strerror (CURLcode);
curl_share_strerror=: ((dquote libcurl), ' curl_share_strerror > x i ') & (15!:0)                       NB. const char *curl_share_strerror (CURLSHcode);
curl_easy_pause=: ((dquote libcurl), ' curl_easy_pause > i x i ') & (15!:0)                             NB. CURLcode curl_easy_pause (CURL *, int);
curl_easy_init=: ((dquote libcurl), ' curl_easy_init > x ') & (15!:0)                                   NB. CURL *curl_easy_init (void);
curl_easy_setopt=: ((dquote libcurl), ' curl_easy_setopt > i x i x ') & (15!:0)                         NB. CURLcode curl_easy_setopt (CURL *, CURLoption, ...);
curl_easy_perform=: ((dquote libcurl), ' curl_easy_perform > i x ') & (15!:0)                           NB. CURLcode curl_easy_perform (CURL *);
curl_easy_cleanup=: ((dquote libcurl), ' curl_easy_cleanup > n x ') & (15!:0)                           NB. void curl_easy_cleanup (CURL *);
curl_easy_getinfo=: ((dquote libcurl), ' curl_easy_getinfo > i x i x ') & (15!:0)                       NB. CURLcode curl_easy_getinfo (CURL *, CURLINFO, ...);
curl_easy_duphandle=: ((dquote libcurl), ' curl_easy_duphandle > x x ') & (15!:0)                       NB. CURL *curl_easy_duphandle (CURL *);
curl_easy_reset=: ((dquote libcurl), ' curl_easy_reset > n x ') & (15!:0)                               NB. void curl_easy_reset (CURL *);
curl_easy_recv=: ((dquote libcurl), ' curl_easy_recv > i x x x *x ') & (15!:0)                          NB. CURLcode curl_easy_recv (CURL *, void *, size_t, size_t *);
curl_easy_send=: ((dquote libcurl), ' curl_easy_send > i x x x *x ') & (15!:0)                          NB. CURLcode curl_easy_send (CURL *, const void *, size_t, size_t *);
curl_easy_upkeep=: ((dquote libcurl), ' curl_easy_upkeep > i x ') & (15!:0)                             NB. CURLcode curl_easy_upkeep (CURL *);
curl_multi_init=: ((dquote libcurl), ' curl_multi_init > x ') & (15!:0)                                 NB. CURLM *curl_multi_init (void);
curl_multi_add_handle=: ((dquote libcurl), ' curl_multi_add_handle > i x x ') & (15!:0)                 NB. CURLMcode curl_multi_add_handle (CURLM *, CURL *);
curl_multi_remove_handle=: ((dquote libcurl), ' curl_multi_remove_handle > i x x ') & (15!:0)           NB. CURLMcode curl_multi_remove_handle (CURLM *, CURL *);
curl_multi_fdset=: ((dquote libcurl), ' curl_multi_fdset > i x x x x *i ') & (15!:0)                    NB. CURLMcode curl_multi_fdset (CURLM *, fd_set *, fd_set *, fd_set *, int *);
curl_multi_wait=: ((dquote libcurl), ' curl_multi_wait > i x x i i *i ') & (15!:0)                      NB. CURLMcode curl_multi_wait (CURLM *, struct curl_waitfd *, unsigned int, int, int *);
curl_multi_poll=: ((dquote libcurl), ' curl_multi_poll > i x x i i *i ') & (15!:0)                      NB. CURLMcode curl_multi_poll (CURLM *, struct curl_waitfd *, unsigned int, int, int *);
curl_multi_wakeup=: ((dquote libcurl), ' curl_multi_wakeup > i x ') & (15!:0)                           NB. CURLMcode curl_multi_wakeup (CURLM *);
curl_multi_perform=: ((dquote libcurl), ' curl_multi_perform > i x *i ') & (15!:0)                      NB. CURLMcode curl_multi_perform (CURLM *, int *);
curl_multi_cleanup=: ((dquote libcurl), ' curl_multi_cleanup > i x ') & (15!:0)                         NB. CURLMcode curl_multi_cleanup (CURLM *);
curl_multi_info_read=: ((dquote libcurl), ' curl_multi_info_read > x x *i ') & (15!:0)                  NB. CURLMsg *curl_multi_info_read (CURLM *, int *);
curl_multi_strerror=: ((dquote libcurl), ' curl_multi_strerror > x i ') & (15!:0)                       NB. const char *curl_multi_strerror (CURLMcode);
curl_multi_socket=: ((dquote libcurl), ' curl_multi_socket > i x x *i ') & (15!:0)                      NB. CURLMcode curl_multi_socket (CURLM *, curl_socket_t, int *);
curl_multi_socket_action=: ((dquote libcurl), ' curl_multi_socket_action > i x x i *i ') & (15!:0)      NB. CURLMcode curl_multi_socket_action (CURLM *, curl_socket_t, int, int *);
curl_multi_socket_all=: ((dquote libcurl), ' curl_multi_socket_all > i x *i ') & (15!:0)                NB. CURLMcode curl_multi_socket_all (CURLM *, int *);
curl_multi_timeout=: ((dquote libcurl), ' curl_multi_timeout > i x *x ') & (15!:0)                      NB. CURLMcode curl_multi_timeout (CURLM *, long int *);
curl_multi_setopt=: ((dquote libcurl), ' curl_multi_setopt > i x i x ') & (15!:0)                       NB. CURLMcode curl_multi_setopt (CURLM *, CURLMoption, ...);
curl_multi_assign=: ((dquote libcurl), ' curl_multi_assign > i x x x ') & (15!:0)                       NB. CURLMcode curl_multi_assign (CURLM *, curl_socket_t, void *);
curl_multi_get_handles=: ((dquote libcurl), ' curl_multi_get_handles > x x ') & (15!:0)                 NB. CURL **curl_multi_get_handles (CURLM *);
curl_pushheader_bynum=: ((dquote libcurl), ' curl_pushheader_bynum > x x x ') & (15!:0)                 NB. char *curl_pushheader_bynum (struct curl_pushheaders *, size_t);
curl_pushheader_byname=: ((dquote libcurl), ' curl_pushheader_byname > x x *c ') & (15!:0)              NB. char *curl_pushheader_byname (struct curl_pushheaders *, const char *);
curl_url=: ((dquote libcurl), ' curl_url > x ') & (15!:0)                                               NB. CURLU *curl_url (void);
curl_url_cleanup=: ((dquote libcurl), ' curl_url_cleanup > n x ') & (15!:0)                             NB. void curl_url_cleanup (CURLU *);
curl_url_dup=: ((dquote libcurl), ' curl_url_dup > x x ') & (15!:0)                                     NB. CURLU *curl_url_dup (const CURLU *);
curl_url_get=: ((dquote libcurl), ' curl_url_get > i x i *x i ') & (15!:0)                              NB. CURLUcode curl_url_get (const CURLU *, CURLUPart, char **, unsigned int);
curl_url_set=: ((dquote libcurl), ' curl_url_set > i x i *c i ') & (15!:0)                              NB. CURLUcode curl_url_set (CURLU *, CURLUPart, const char *, unsigned int);
curl_url_strerror=: ((dquote libcurl), ' curl_url_strerror > x i ') & (15!:0)                           NB. const char *curl_url_strerror (CURLUcode);
curl_easy_option_by_name=: ((dquote libcurl), ' curl_easy_option_by_name > x *c ') & (15!:0)            NB. const struct curl_easyoption *curl_easy_option_by_name (const char *);
curl_easy_option_by_id=: ((dquote libcurl), ' curl_easy_option_by_id > x i ') & (15!:0)                 NB. const struct curl_easyoption *curl_easy_option_by_id (CURLoption);
curl_easy_option_next=: ((dquote libcurl), ' curl_easy_option_next > x x ') & (15!:0)                   NB. const struct curl_easyoption *curl_easy_option_next (const struct curl_easyoption *);
curl_easy_header=: ((dquote libcurl), ' curl_easy_header > i x *c x i i *x ') & (15!:0)                 NB. CURLHcode curl_easy_header (CURL *, const char *, size_t, unsigned int, int, struct curl_header **);
curl_easy_nextheader=: ((dquote libcurl), ' curl_easy_nextheader > x x i i *x ') & (15!:0)              NB. struct curl_header *curl_easy_nextheader (CURL *, unsigned int, int, struct curl_header *);
curl_ws_recv=: ((dquote libcurl), ' curl_ws_recv > i x x x *x *x ') & (15!:0)                           NB. CURLcode curl_ws_recv (CURL *, void *, size_t, size_t *, const struct curl_ws_frame **);
curl_ws_send=: ((dquote libcurl), ' curl_ws_send > i x x x *x x i ') & (15!:0)                          NB. CURLcode curl_ws_send (CURL *, const void *, size_t, size_t *, curl_off_t, unsigned int);
curl_ws_meta=: ((dquote libcurl), ' curl_ws_meta > x x ') & (15!:0)                                     NB. const struct curl_ws_frame *curl_ws_meta (CURL *);
